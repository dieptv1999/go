// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package qlnv

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Value
type OverlapException struct {
  Value string `thrift:"value,1" db:"value" json:"value"`
}

func NewOverlapException() *OverlapException {
  return &OverlapException{}
}


func (p *OverlapException) GetValue() string {
  return p.Value
}
func (p *OverlapException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OverlapException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *OverlapException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OverlapException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OverlapException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *OverlapException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OverlapException(%+v)", *p)
}

func (p *OverlapException) Error() string {
  return p.String()
}

// Attributes:
//  - Value
type NotFoundException struct {
  Value string `thrift:"value,1" db:"value" json:"value"`
}

func NewNotFoundException() *NotFoundException {
  return &NotFoundException{}
}


func (p *NotFoundException) GetValue() string {
  return p.Value
}
func (p *NotFoundException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotFoundException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *NotFoundException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NotFoundException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotFoundException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *NotFoundException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotFoundException(%+v)", *p)
}

func (p *NotFoundException) Error() string {
  return p.String()
}

// Attributes:
//  - Type
//  - Value
type AccessException struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewAccessException() *AccessException {
  return &AccessException{}
}


func (p *AccessException) GetType() string {
  return p.Type
}

func (p *AccessException) GetValue() string {
  return p.Value
}
func (p *AccessException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccessException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *AccessException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *AccessException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccessException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccessException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *AccessException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *AccessException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccessException(%+v)", *p)
}

func (p *AccessException) Error() string {
  return p.String()
}

// Attributes:
//  - UserId
//  - Name
//  - DateOfBirth
//  - Address
//  - UnitId
type User struct {
  UserId string `thrift:"userId,1" db:"userId" json:"userId"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  DateOfBirth int64 `thrift:"dateOfBirth,3" db:"dateOfBirth" json:"dateOfBirth"`
  Address string `thrift:"address,4" db:"address" json:"address"`
  UnitId string `thrift:"unitId,5" db:"unitId" json:"unitId"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetUserId() string {
  return p.UserId
}

func (p *User) GetName() string {
  return p.Name
}

func (p *User) GetDateOfBirth() int64 {
  return p.DateOfBirth
}

func (p *User) GetAddress() string {
  return p.Address
}

func (p *User) GetUnitId() string {
  return p.UnitId
}
func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *User)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DateOfBirth = v
}
  return nil
}

func (p *User)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *User)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UnitId = v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dateOfBirth", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dateOfBirth: ", p), err) }
  if err := oprot.WriteI64(int64(p.DateOfBirth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dateOfBirth (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dateOfBirth: ", p), err) }
  return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:address: ", p), err) }
  return err
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unitId: ", p), err) }
  if err := oprot.WriteString(string(p.UnitId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unitId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unitId: ", p), err) }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - UnitId
//  - Name
//  - Address
type Unit struct {
  UnitId string `thrift:"unitId,1" db:"unitId" json:"unitId"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Address string `thrift:"address,3" db:"address" json:"address"`
}

func NewUnit() *Unit {
  return &Unit{}
}


func (p *Unit) GetUnitId() string {
  return p.UnitId
}

func (p *Unit) GetName() string {
  return p.Name
}

func (p *Unit) GetAddress() string {
  return p.Address
}
func (p *Unit) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Unit)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UnitId = v
}
  return nil
}

func (p *Unit)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Unit)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Unit) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Unit"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Unit) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unitId: ", p), err) }
  if err := oprot.WriteString(string(p.UnitId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unitId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unitId: ", p), err) }
  return err
}

func (p *Unit) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Unit) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:address: ", p), err) }
  return err
}

func (p *Unit) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Unit(%+v)", *p)
}

type UserService interface {
  // Parameters:
  //  - U
  CreateUser(ctx context.Context, u *User) (err error)
  // Parameters:
  //  - UserId
  ReadUser(ctx context.Context, userId string) (r *User, err error)
  // Parameters:
  //  - U
  UpdateUser(ctx context.Context, u *User) (err error)
  // Parameters:
  //  - UserId
  DeleteUser(ctx context.Context, userId string) (err error)
  // Parameters:
  //  - UserId
  GetUnitUser(ctx context.Context, userId string) (r *Unit, err error)
  // Parameters:
  //  - NumOfPages
  //  - SizeOfpage
  //  - SortType
  GetUserSortedByPage(ctx context.Context, numOfPages int32, sizeOfpage int32, sortType string) (r []*User, err error)
}

type UserServiceClient struct {
  c thrift.TClient
}

func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
  return &UserServiceClient{
    c: c,
  }
}

func (p *UserServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - U
func (p *UserServiceClient) CreateUser(ctx context.Context, u *User) (err error) {
  var _args0 UserServiceCreateUserArgs
  _args0.U = u
  var _result1 UserServiceCreateUserResult
  if err = p.Client_().Call(ctx, "createUser", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Err!= nil:
    return _result1.Err
  }

  return nil
}

// Parameters:
//  - UserId
func (p *UserServiceClient) ReadUser(ctx context.Context, userId string) (r *User, err error) {
  var _args2 UserServiceReadUserArgs
  _args2.UserId = userId
  var _result3 UserServiceReadUserResult
  if err = p.Client_().Call(ctx, "readUser", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Err!= nil:
    return r, _result3.Err
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - U
func (p *UserServiceClient) UpdateUser(ctx context.Context, u *User) (err error) {
  var _args4 UserServiceUpdateUserArgs
  _args4.U = u
  var _result5 UserServiceUpdateUserResult
  if err = p.Client_().Call(ctx, "updateUser", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Err!= nil:
    return _result5.Err
  }

  return nil
}

// Parameters:
//  - UserId
func (p *UserServiceClient) DeleteUser(ctx context.Context, userId string) (err error) {
  var _args6 UserServiceDeleteUserArgs
  _args6.UserId = userId
  var _result7 UserServiceDeleteUserResult
  if err = p.Client_().Call(ctx, "deleteUser", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.NotFound!= nil:
    return _result7.NotFound
  case _result7.AccessEx!= nil:
    return _result7.AccessEx
  }

  return nil
}

// Parameters:
//  - UserId
func (p *UserServiceClient) GetUnitUser(ctx context.Context, userId string) (r *Unit, err error) {
  var _args8 UserServiceGetUnitUserArgs
  _args8.UserId = userId
  var _result9 UserServiceGetUnitUserResult
  if err = p.Client_().Call(ctx, "getUnitUser", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.Err!= nil:
    return r, _result9.Err
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - NumOfPages
//  - SizeOfpage
//  - SortType
func (p *UserServiceClient) GetUserSortedByPage(ctx context.Context, numOfPages int32, sizeOfpage int32, sortType string) (r []*User, err error) {
  var _args10 UserServiceGetUserSortedByPageArgs
  _args10.NumOfPages = numOfPages
  _args10.SizeOfpage = sizeOfpage
  _args10.SortType = sortType
  var _result11 UserServiceGetUserSortedByPageResult
  if err = p.Client_().Call(ctx, "getUserSortedByPage", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.Err!= nil:
    return r, _result11.Err
  }

  return _result11.GetSuccess(), nil
}

type UserServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserService
}

func (p *UserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {

  self12 := &UserServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["createUser"] = &userServiceProcessorCreateUser{handler:handler}
  self12.processorMap["readUser"] = &userServiceProcessorReadUser{handler:handler}
  self12.processorMap["updateUser"] = &userServiceProcessorUpdateUser{handler:handler}
  self12.processorMap["deleteUser"] = &userServiceProcessorDeleteUser{handler:handler}
  self12.processorMap["getUnitUser"] = &userServiceProcessorGetUnitUser{handler:handler}
  self12.processorMap["getUserSortedByPage"] = &userServiceProcessorGetUserSortedByPage{handler:handler}
return self12
}

func (p *UserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type userServiceProcessorCreateUser struct {
  handler UserService
}

func (p *userServiceProcessorCreateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceCreateUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceCreateUserResult{}
  var err2 error
  if err2 = p.handler.CreateUser(ctx, args.U); err2 != nil {
  switch v := err2.(type) {
    case *OverlapException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUser: " + err2.Error())
    oprot.WriteMessageBegin("createUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorReadUser struct {
  handler UserService
}

func (p *userServiceProcessorReadUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceReadUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceReadUserResult{}
var retval *User
  var err2 error
  if retval, err2 = p.handler.ReadUser(ctx, args.UserId); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readUser: " + err2.Error())
    oprot.WriteMessageBegin("readUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorUpdateUser struct {
  handler UserService
}

func (p *userServiceProcessorUpdateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceUpdateUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceUpdateUserResult{}
  var err2 error
  if err2 = p.handler.UpdateUser(ctx, args.U); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUser: " + err2.Error())
    oprot.WriteMessageBegin("updateUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorDeleteUser struct {
  handler UserService
}

func (p *userServiceProcessorDeleteUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceDeleteUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceDeleteUserResult{}
  var err2 error
  if err2 = p.handler.DeleteUser(ctx, args.UserId); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.NotFound = v
    case *AccessException:
  result.AccessEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUser: " + err2.Error())
    oprot.WriteMessageBegin("deleteUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorGetUnitUser struct {
  handler UserService
}

func (p *userServiceProcessorGetUnitUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceGetUnitUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUnitUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceGetUnitUserResult{}
var retval *Unit
  var err2 error
  if retval, err2 = p.handler.GetUnitUser(ctx, args.UserId); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUnitUser: " + err2.Error())
    oprot.WriteMessageBegin("getUnitUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUnitUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorGetUserSortedByPage struct {
  handler UserService
}

func (p *userServiceProcessorGetUserSortedByPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceGetUserSortedByPageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserSortedByPage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceGetUserSortedByPageResult{}
var retval []*User
  var err2 error
  if retval, err2 = p.handler.GetUserSortedByPage(ctx, args.NumOfPages, args.SizeOfpage, args.SortType); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserSortedByPage: " + err2.Error())
    oprot.WriteMessageBegin("getUserSortedByPage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserSortedByPage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - U
type UserServiceCreateUserArgs struct {
  U *User `thrift:"u,1" db:"u" json:"u"`
}

func NewUserServiceCreateUserArgs() *UserServiceCreateUserArgs {
  return &UserServiceCreateUserArgs{}
}

var UserServiceCreateUserArgs_U_DEFAULT *User
func (p *UserServiceCreateUserArgs) GetU() *User {
  if !p.IsSetU() {
    return UserServiceCreateUserArgs_U_DEFAULT
  }
return p.U
}
func (p *UserServiceCreateUserArgs) IsSetU() bool {
  return p.U != nil
}

func (p *UserServiceCreateUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceCreateUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.U = &User{}
  if err := p.U.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.U), err)
  }
  return nil
}

func (p *UserServiceCreateUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceCreateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("u", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:u: ", p), err) }
  if err := p.U.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.U), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:u: ", p), err) }
  return err
}

func (p *UserServiceCreateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceCreateUserArgs(%+v)", *p)
}

// Attributes:
//  - Err
type UserServiceCreateUserResult struct {
  Err *OverlapException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUserServiceCreateUserResult() *UserServiceCreateUserResult {
  return &UserServiceCreateUserResult{}
}

var UserServiceCreateUserResult_Err_DEFAULT *OverlapException
func (p *UserServiceCreateUserResult) GetErr() *OverlapException {
  if !p.IsSetErr() {
    return UserServiceCreateUserResult_Err_DEFAULT
  }
return p.Err
}
func (p *UserServiceCreateUserResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UserServiceCreateUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceCreateUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &OverlapException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UserServiceCreateUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceCreateUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UserServiceCreateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceCreateUserResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserServiceReadUserArgs struct {
  UserId string `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserServiceReadUserArgs() *UserServiceReadUserArgs {
  return &UserServiceReadUserArgs{}
}


func (p *UserServiceReadUserArgs) GetUserId() string {
  return p.UserId
}
func (p *UserServiceReadUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceReadUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserServiceReadUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceReadUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UserServiceReadUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceReadUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type UserServiceReadUserResult struct {
  Success *User `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *NotFoundException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUserServiceReadUserResult() *UserServiceReadUserResult {
  return &UserServiceReadUserResult{}
}

var UserServiceReadUserResult_Success_DEFAULT *User
func (p *UserServiceReadUserResult) GetSuccess() *User {
  if !p.IsSetSuccess() {
    return UserServiceReadUserResult_Success_DEFAULT
  }
return p.Success
}
var UserServiceReadUserResult_Err_DEFAULT *NotFoundException
func (p *UserServiceReadUserResult) GetErr() *NotFoundException {
  if !p.IsSetErr() {
    return UserServiceReadUserResult_Err_DEFAULT
  }
return p.Err
}
func (p *UserServiceReadUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceReadUserResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UserServiceReadUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceReadUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &User{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceReadUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &NotFoundException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UserServiceReadUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceReadUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceReadUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UserServiceReadUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceReadUserResult(%+v)", *p)
}

// Attributes:
//  - U
type UserServiceUpdateUserArgs struct {
  U *User `thrift:"u,1" db:"u" json:"u"`
}

func NewUserServiceUpdateUserArgs() *UserServiceUpdateUserArgs {
  return &UserServiceUpdateUserArgs{}
}

var UserServiceUpdateUserArgs_U_DEFAULT *User
func (p *UserServiceUpdateUserArgs) GetU() *User {
  if !p.IsSetU() {
    return UserServiceUpdateUserArgs_U_DEFAULT
  }
return p.U
}
func (p *UserServiceUpdateUserArgs) IsSetU() bool {
  return p.U != nil
}

func (p *UserServiceUpdateUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceUpdateUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.U = &User{}
  if err := p.U.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.U), err)
  }
  return nil
}

func (p *UserServiceUpdateUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceUpdateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("u", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:u: ", p), err) }
  if err := p.U.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.U), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:u: ", p), err) }
  return err
}

func (p *UserServiceUpdateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceUpdateUserArgs(%+v)", *p)
}

// Attributes:
//  - Err
type UserServiceUpdateUserResult struct {
  Err *NotFoundException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUserServiceUpdateUserResult() *UserServiceUpdateUserResult {
  return &UserServiceUpdateUserResult{}
}

var UserServiceUpdateUserResult_Err_DEFAULT *NotFoundException
func (p *UserServiceUpdateUserResult) GetErr() *NotFoundException {
  if !p.IsSetErr() {
    return UserServiceUpdateUserResult_Err_DEFAULT
  }
return p.Err
}
func (p *UserServiceUpdateUserResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UserServiceUpdateUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceUpdateUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &NotFoundException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UserServiceUpdateUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceUpdateUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UserServiceUpdateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceUpdateUserResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserServiceDeleteUserArgs struct {
  UserId string `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserServiceDeleteUserArgs() *UserServiceDeleteUserArgs {
  return &UserServiceDeleteUserArgs{}
}


func (p *UserServiceDeleteUserArgs) GetUserId() string {
  return p.UserId
}
func (p *UserServiceDeleteUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceDeleteUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserServiceDeleteUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceDeleteUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UserServiceDeleteUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceDeleteUserArgs(%+v)", *p)
}

// Attributes:
//  - NotFound
//  - AccessEx
type UserServiceDeleteUserResult struct {
  NotFound *NotFoundException `thrift:"notFound,1" db:"notFound" json:"notFound,omitempty"`
  AccessEx *AccessException `thrift:"accessEx,2" db:"accessEx" json:"accessEx,omitempty"`
}

func NewUserServiceDeleteUserResult() *UserServiceDeleteUserResult {
  return &UserServiceDeleteUserResult{}
}

var UserServiceDeleteUserResult_NotFound_DEFAULT *NotFoundException
func (p *UserServiceDeleteUserResult) GetNotFound() *NotFoundException {
  if !p.IsSetNotFound() {
    return UserServiceDeleteUserResult_NotFound_DEFAULT
  }
return p.NotFound
}
var UserServiceDeleteUserResult_AccessEx_DEFAULT *AccessException
func (p *UserServiceDeleteUserResult) GetAccessEx() *AccessException {
  if !p.IsSetAccessEx() {
    return UserServiceDeleteUserResult_AccessEx_DEFAULT
  }
return p.AccessEx
}
func (p *UserServiceDeleteUserResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *UserServiceDeleteUserResult) IsSetAccessEx() bool {
  return p.AccessEx != nil
}

func (p *UserServiceDeleteUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceDeleteUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.NotFound = &NotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *UserServiceDeleteUserResult)  ReadField2(iprot thrift.TProtocol) error {
  p.AccessEx = &AccessException{}
  if err := p.AccessEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AccessEx), err)
  }
  return nil
}

func (p *UserServiceDeleteUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceDeleteUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notFound: ", p), err) }
  }
  return err
}

func (p *UserServiceDeleteUserResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAccessEx() {
    if err := oprot.WriteFieldBegin("accessEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accessEx: ", p), err) }
    if err := p.AccessEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AccessEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accessEx: ", p), err) }
  }
  return err
}

func (p *UserServiceDeleteUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceDeleteUserResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserServiceGetUnitUserArgs struct {
  UserId string `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserServiceGetUnitUserArgs() *UserServiceGetUnitUserArgs {
  return &UserServiceGetUnitUserArgs{}
}


func (p *UserServiceGetUnitUserArgs) GetUserId() string {
  return p.UserId
}
func (p *UserServiceGetUnitUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUnitUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserServiceGetUnitUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUnitUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUnitUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UserServiceGetUnitUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUnitUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type UserServiceGetUnitUserResult struct {
  Success *Unit `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *NotFoundException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUserServiceGetUnitUserResult() *UserServiceGetUnitUserResult {
  return &UserServiceGetUnitUserResult{}
}

var UserServiceGetUnitUserResult_Success_DEFAULT *Unit
func (p *UserServiceGetUnitUserResult) GetSuccess() *Unit {
  if !p.IsSetSuccess() {
    return UserServiceGetUnitUserResult_Success_DEFAULT
  }
return p.Success
}
var UserServiceGetUnitUserResult_Err_DEFAULT *NotFoundException
func (p *UserServiceGetUnitUserResult) GetErr() *NotFoundException {
  if !p.IsSetErr() {
    return UserServiceGetUnitUserResult_Err_DEFAULT
  }
return p.Err
}
func (p *UserServiceGetUnitUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceGetUnitUserResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UserServiceGetUnitUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUnitUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Unit{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceGetUnitUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &NotFoundException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UserServiceGetUnitUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUnitUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUnitUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUnitUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUnitUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUnitUserResult(%+v)", *p)
}

// Attributes:
//  - NumOfPages
//  - SizeOfpage
//  - SortType
type UserServiceGetUserSortedByPageArgs struct {
  NumOfPages int32 `thrift:"numOfPages,1" db:"numOfPages" json:"numOfPages"`
  SizeOfpage int32 `thrift:"sizeOfpage,2" db:"sizeOfpage" json:"sizeOfpage"`
  SortType string `thrift:"sortType,3" db:"sortType" json:"sortType"`
}

func NewUserServiceGetUserSortedByPageArgs() *UserServiceGetUserSortedByPageArgs {
  return &UserServiceGetUserSortedByPageArgs{}
}


func (p *UserServiceGetUserSortedByPageArgs) GetNumOfPages() int32 {
  return p.NumOfPages
}

func (p *UserServiceGetUserSortedByPageArgs) GetSizeOfpage() int32 {
  return p.SizeOfpage
}

func (p *UserServiceGetUserSortedByPageArgs) GetSortType() string {
  return p.SortType
}
func (p *UserServiceGetUserSortedByPageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserSortedByPageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumOfPages = v
}
  return nil
}

func (p *UserServiceGetUserSortedByPageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SizeOfpage = v
}
  return nil
}

func (p *UserServiceGetUserSortedByPageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SortType = v
}
  return nil
}

func (p *UserServiceGetUserSortedByPageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserSortedByPage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserSortedByPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numOfPages", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numOfPages: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumOfPages)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numOfPages (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numOfPages: ", p), err) }
  return err
}

func (p *UserServiceGetUserSortedByPageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sizeOfpage", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sizeOfpage: ", p), err) }
  if err := oprot.WriteI32(int32(p.SizeOfpage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sizeOfpage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sizeOfpage: ", p), err) }
  return err
}

func (p *UserServiceGetUserSortedByPageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sortType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sortType: ", p), err) }
  if err := oprot.WriteString(string(p.SortType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sortType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sortType: ", p), err) }
  return err
}

func (p *UserServiceGetUserSortedByPageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserSortedByPageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type UserServiceGetUserSortedByPageResult struct {
  Success []*User `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *NotFoundException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUserServiceGetUserSortedByPageResult() *UserServiceGetUserSortedByPageResult {
  return &UserServiceGetUserSortedByPageResult{}
}

var UserServiceGetUserSortedByPageResult_Success_DEFAULT []*User

func (p *UserServiceGetUserSortedByPageResult) GetSuccess() []*User {
  return p.Success
}
var UserServiceGetUserSortedByPageResult_Err_DEFAULT *NotFoundException
func (p *UserServiceGetUserSortedByPageResult) GetErr() *NotFoundException {
  if !p.IsSetErr() {
    return UserServiceGetUserSortedByPageResult_Err_DEFAULT
  }
return p.Err
}
func (p *UserServiceGetUserSortedByPageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceGetUserSortedByPageResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UserServiceGetUserSortedByPageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserSortedByPageResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*User, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &User{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserServiceGetUserSortedByPageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &NotFoundException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UserServiceGetUserSortedByPageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserSortedByPage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserSortedByPageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserSortedByPageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserSortedByPageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserSortedByPageResult(%+v)", *p)
}


type UnitService interface {
  // Parameters:
  //  - U
  CreateUnit(ctx context.Context, u *Unit) (err error)
  // Parameters:
  //  - UnitId
  ReadUnit(ctx context.Context, unitId string) (r *Unit, err error)
  // Parameters:
  //  - U
  UpdateUnit(ctx context.Context, u *Unit) (err error)
  // Parameters:
  //  - UnitId
  DeleteUnit(ctx context.Context, unitId string) (err error)
  // Parameters:
  //  - UnitId
  GetAllMemberOfUnit(ctx context.Context, unitId string) (r []*User, err error)
  // Parameters:
  //  - UnitId
  //  - NumOfPage
  //  - SizeOfPage
  GetMembersByPage(ctx context.Context, unitId string, numOfPage int32, sizeOfPage int32) (r []*User, err error)
}

type UnitServiceClient struct {
  c thrift.TClient
}

func NewUnitServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UnitServiceClient {
  return &UnitServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUnitServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UnitServiceClient {
  return &UnitServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUnitServiceClient(c thrift.TClient) *UnitServiceClient {
  return &UnitServiceClient{
    c: c,
  }
}

func (p *UnitServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - U
func (p *UnitServiceClient) CreateUnit(ctx context.Context, u *Unit) (err error) {
  var _args33 UnitServiceCreateUnitArgs
  _args33.U = u
  var _result34 UnitServiceCreateUnitResult
  if err = p.Client_().Call(ctx, "createUnit", &_args33, &_result34); err != nil {
    return
  }
  switch {
  case _result34.Err!= nil:
    return _result34.Err
  }

  return nil
}

// Parameters:
//  - UnitId
func (p *UnitServiceClient) ReadUnit(ctx context.Context, unitId string) (r *Unit, err error) {
  var _args35 UnitServiceReadUnitArgs
  _args35.UnitId = unitId
  var _result36 UnitServiceReadUnitResult
  if err = p.Client_().Call(ctx, "readUnit", &_args35, &_result36); err != nil {
    return
  }
  switch {
  case _result36.Err!= nil:
    return r, _result36.Err
  }

  return _result36.GetSuccess(), nil
}

// Parameters:
//  - U
func (p *UnitServiceClient) UpdateUnit(ctx context.Context, u *Unit) (err error) {
  var _args37 UnitServiceUpdateUnitArgs
  _args37.U = u
  var _result38 UnitServiceUpdateUnitResult
  if err = p.Client_().Call(ctx, "updateUnit", &_args37, &_result38); err != nil {
    return
  }
  switch {
  case _result38.Err!= nil:
    return _result38.Err
  }

  return nil
}

// Parameters:
//  - UnitId
func (p *UnitServiceClient) DeleteUnit(ctx context.Context, unitId string) (err error) {
  var _args39 UnitServiceDeleteUnitArgs
  _args39.UnitId = unitId
  var _result40 UnitServiceDeleteUnitResult
  if err = p.Client_().Call(ctx, "deleteUnit", &_args39, &_result40); err != nil {
    return
  }
  switch {
  case _result40.NotFound!= nil:
    return _result40.NotFound
  case _result40.AccessEx!= nil:
    return _result40.AccessEx
  }

  return nil
}

// Parameters:
//  - UnitId
func (p *UnitServiceClient) GetAllMemberOfUnit(ctx context.Context, unitId string) (r []*User, err error) {
  var _args41 UnitServiceGetAllMemberOfUnitArgs
  _args41.UnitId = unitId
  var _result42 UnitServiceGetAllMemberOfUnitResult
  if err = p.Client_().Call(ctx, "getAllMemberOfUnit", &_args41, &_result42); err != nil {
    return
  }
  switch {
  case _result42.Err!= nil:
    return r, _result42.Err
  }

  return _result42.GetSuccess(), nil
}

// Parameters:
//  - UnitId
//  - NumOfPage
//  - SizeOfPage
func (p *UnitServiceClient) GetMembersByPage(ctx context.Context, unitId string, numOfPage int32, sizeOfPage int32) (r []*User, err error) {
  var _args43 UnitServiceGetMembersByPageArgs
  _args43.UnitId = unitId
  _args43.NumOfPage = numOfPage
  _args43.SizeOfPage = sizeOfPage
  var _result44 UnitServiceGetMembersByPageResult
  if err = p.Client_().Call(ctx, "getMembersByPage", &_args43, &_result44); err != nil {
    return
  }
  switch {
  case _result44.Err!= nil:
    return r, _result44.Err
  }

  return _result44.GetSuccess(), nil
}

type UnitServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UnitService
}

func (p *UnitServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UnitServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UnitServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUnitServiceProcessor(handler UnitService) *UnitServiceProcessor {

  self45 := &UnitServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self45.processorMap["createUnit"] = &unitServiceProcessorCreateUnit{handler:handler}
  self45.processorMap["readUnit"] = &unitServiceProcessorReadUnit{handler:handler}
  self45.processorMap["updateUnit"] = &unitServiceProcessorUpdateUnit{handler:handler}
  self45.processorMap["deleteUnit"] = &unitServiceProcessorDeleteUnit{handler:handler}
  self45.processorMap["getAllMemberOfUnit"] = &unitServiceProcessorGetAllMemberOfUnit{handler:handler}
  self45.processorMap["getMembersByPage"] = &unitServiceProcessorGetMembersByPage{handler:handler}
return self45
}

func (p *UnitServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x46 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x46.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x46

}

type unitServiceProcessorCreateUnit struct {
  handler UnitService
}

func (p *unitServiceProcessorCreateUnit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UnitServiceCreateUnitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UnitServiceCreateUnitResult{}
  var err2 error
  if err2 = p.handler.CreateUnit(ctx, args.U); err2 != nil {
  switch v := err2.(type) {
    case *OverlapException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUnit: " + err2.Error())
    oprot.WriteMessageBegin("createUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createUnit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type unitServiceProcessorReadUnit struct {
  handler UnitService
}

func (p *unitServiceProcessorReadUnit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UnitServiceReadUnitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UnitServiceReadUnitResult{}
var retval *Unit
  var err2 error
  if retval, err2 = p.handler.ReadUnit(ctx, args.UnitId); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readUnit: " + err2.Error())
    oprot.WriteMessageBegin("readUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readUnit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type unitServiceProcessorUpdateUnit struct {
  handler UnitService
}

func (p *unitServiceProcessorUpdateUnit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UnitServiceUpdateUnitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UnitServiceUpdateUnitResult{}
  var err2 error
  if err2 = p.handler.UpdateUnit(ctx, args.U); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUnit: " + err2.Error())
    oprot.WriteMessageBegin("updateUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateUnit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type unitServiceProcessorDeleteUnit struct {
  handler UnitService
}

func (p *unitServiceProcessorDeleteUnit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UnitServiceDeleteUnitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UnitServiceDeleteUnitResult{}
  var err2 error
  if err2 = p.handler.DeleteUnit(ctx, args.UnitId); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.NotFound = v
    case *AccessException:
  result.AccessEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUnit: " + err2.Error())
    oprot.WriteMessageBegin("deleteUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteUnit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type unitServiceProcessorGetAllMemberOfUnit struct {
  handler UnitService
}

func (p *unitServiceProcessorGetAllMemberOfUnit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UnitServiceGetAllMemberOfUnitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllMemberOfUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UnitServiceGetAllMemberOfUnitResult{}
var retval []*User
  var err2 error
  if retval, err2 = p.handler.GetAllMemberOfUnit(ctx, args.UnitId); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllMemberOfUnit: " + err2.Error())
    oprot.WriteMessageBegin("getAllMemberOfUnit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllMemberOfUnit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type unitServiceProcessorGetMembersByPage struct {
  handler UnitService
}

func (p *unitServiceProcessorGetMembersByPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UnitServiceGetMembersByPageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMembersByPage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UnitServiceGetMembersByPageResult{}
var retval []*User
  var err2 error
  if retval, err2 = p.handler.GetMembersByPage(ctx, args.UnitId, args.NumOfPage, args.SizeOfPage); err2 != nil {
  switch v := err2.(type) {
    case *NotFoundException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMembersByPage: " + err2.Error())
    oprot.WriteMessageBegin("getMembersByPage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMembersByPage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - U
type UnitServiceCreateUnitArgs struct {
  U *Unit `thrift:"u,1" db:"u" json:"u"`
}

func NewUnitServiceCreateUnitArgs() *UnitServiceCreateUnitArgs {
  return &UnitServiceCreateUnitArgs{}
}

var UnitServiceCreateUnitArgs_U_DEFAULT *Unit
func (p *UnitServiceCreateUnitArgs) GetU() *Unit {
  if !p.IsSetU() {
    return UnitServiceCreateUnitArgs_U_DEFAULT
  }
return p.U
}
func (p *UnitServiceCreateUnitArgs) IsSetU() bool {
  return p.U != nil
}

func (p *UnitServiceCreateUnitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceCreateUnitArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.U = &Unit{}
  if err := p.U.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.U), err)
  }
  return nil
}

func (p *UnitServiceCreateUnitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createUnit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceCreateUnitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("u", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:u: ", p), err) }
  if err := p.U.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.U), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:u: ", p), err) }
  return err
}

func (p *UnitServiceCreateUnitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceCreateUnitArgs(%+v)", *p)
}

// Attributes:
//  - Err
type UnitServiceCreateUnitResult struct {
  Err *OverlapException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUnitServiceCreateUnitResult() *UnitServiceCreateUnitResult {
  return &UnitServiceCreateUnitResult{}
}

var UnitServiceCreateUnitResult_Err_DEFAULT *OverlapException
func (p *UnitServiceCreateUnitResult) GetErr() *OverlapException {
  if !p.IsSetErr() {
    return UnitServiceCreateUnitResult_Err_DEFAULT
  }
return p.Err
}
func (p *UnitServiceCreateUnitResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UnitServiceCreateUnitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceCreateUnitResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &OverlapException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UnitServiceCreateUnitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createUnit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceCreateUnitResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UnitServiceCreateUnitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceCreateUnitResult(%+v)", *p)
}

// Attributes:
//  - UnitId
type UnitServiceReadUnitArgs struct {
  UnitId string `thrift:"unitId,1" db:"unitId" json:"unitId"`
}

func NewUnitServiceReadUnitArgs() *UnitServiceReadUnitArgs {
  return &UnitServiceReadUnitArgs{}
}


func (p *UnitServiceReadUnitArgs) GetUnitId() string {
  return p.UnitId
}
func (p *UnitServiceReadUnitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceReadUnitArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UnitId = v
}
  return nil
}

func (p *UnitServiceReadUnitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readUnit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceReadUnitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unitId: ", p), err) }
  if err := oprot.WriteString(string(p.UnitId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unitId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unitId: ", p), err) }
  return err
}

func (p *UnitServiceReadUnitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceReadUnitArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type UnitServiceReadUnitResult struct {
  Success *Unit `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *NotFoundException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUnitServiceReadUnitResult() *UnitServiceReadUnitResult {
  return &UnitServiceReadUnitResult{}
}

var UnitServiceReadUnitResult_Success_DEFAULT *Unit
func (p *UnitServiceReadUnitResult) GetSuccess() *Unit {
  if !p.IsSetSuccess() {
    return UnitServiceReadUnitResult_Success_DEFAULT
  }
return p.Success
}
var UnitServiceReadUnitResult_Err_DEFAULT *NotFoundException
func (p *UnitServiceReadUnitResult) GetErr() *NotFoundException {
  if !p.IsSetErr() {
    return UnitServiceReadUnitResult_Err_DEFAULT
  }
return p.Err
}
func (p *UnitServiceReadUnitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UnitServiceReadUnitResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UnitServiceReadUnitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceReadUnitResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Unit{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UnitServiceReadUnitResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &NotFoundException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UnitServiceReadUnitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readUnit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceReadUnitResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UnitServiceReadUnitResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UnitServiceReadUnitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceReadUnitResult(%+v)", *p)
}

// Attributes:
//  - U
type UnitServiceUpdateUnitArgs struct {
  U *Unit `thrift:"u,1" db:"u" json:"u"`
}

func NewUnitServiceUpdateUnitArgs() *UnitServiceUpdateUnitArgs {
  return &UnitServiceUpdateUnitArgs{}
}

var UnitServiceUpdateUnitArgs_U_DEFAULT *Unit
func (p *UnitServiceUpdateUnitArgs) GetU() *Unit {
  if !p.IsSetU() {
    return UnitServiceUpdateUnitArgs_U_DEFAULT
  }
return p.U
}
func (p *UnitServiceUpdateUnitArgs) IsSetU() bool {
  return p.U != nil
}

func (p *UnitServiceUpdateUnitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceUpdateUnitArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.U = &Unit{}
  if err := p.U.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.U), err)
  }
  return nil
}

func (p *UnitServiceUpdateUnitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUnit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceUpdateUnitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("u", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:u: ", p), err) }
  if err := p.U.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.U), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:u: ", p), err) }
  return err
}

func (p *UnitServiceUpdateUnitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceUpdateUnitArgs(%+v)", *p)
}

// Attributes:
//  - Err
type UnitServiceUpdateUnitResult struct {
  Err *NotFoundException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUnitServiceUpdateUnitResult() *UnitServiceUpdateUnitResult {
  return &UnitServiceUpdateUnitResult{}
}

var UnitServiceUpdateUnitResult_Err_DEFAULT *NotFoundException
func (p *UnitServiceUpdateUnitResult) GetErr() *NotFoundException {
  if !p.IsSetErr() {
    return UnitServiceUpdateUnitResult_Err_DEFAULT
  }
return p.Err
}
func (p *UnitServiceUpdateUnitResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UnitServiceUpdateUnitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceUpdateUnitResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &NotFoundException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UnitServiceUpdateUnitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUnit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceUpdateUnitResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UnitServiceUpdateUnitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceUpdateUnitResult(%+v)", *p)
}

// Attributes:
//  - UnitId
type UnitServiceDeleteUnitArgs struct {
  UnitId string `thrift:"unitId,1" db:"unitId" json:"unitId"`
}

func NewUnitServiceDeleteUnitArgs() *UnitServiceDeleteUnitArgs {
  return &UnitServiceDeleteUnitArgs{}
}


func (p *UnitServiceDeleteUnitArgs) GetUnitId() string {
  return p.UnitId
}
func (p *UnitServiceDeleteUnitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceDeleteUnitArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UnitId = v
}
  return nil
}

func (p *UnitServiceDeleteUnitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUnit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceDeleteUnitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unitId: ", p), err) }
  if err := oprot.WriteString(string(p.UnitId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unitId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unitId: ", p), err) }
  return err
}

func (p *UnitServiceDeleteUnitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceDeleteUnitArgs(%+v)", *p)
}

// Attributes:
//  - NotFound
//  - AccessEx
type UnitServiceDeleteUnitResult struct {
  NotFound *NotFoundException `thrift:"notFound,1" db:"notFound" json:"notFound,omitempty"`
  AccessEx *AccessException `thrift:"accessEx,2" db:"accessEx" json:"accessEx,omitempty"`
}

func NewUnitServiceDeleteUnitResult() *UnitServiceDeleteUnitResult {
  return &UnitServiceDeleteUnitResult{}
}

var UnitServiceDeleteUnitResult_NotFound_DEFAULT *NotFoundException
func (p *UnitServiceDeleteUnitResult) GetNotFound() *NotFoundException {
  if !p.IsSetNotFound() {
    return UnitServiceDeleteUnitResult_NotFound_DEFAULT
  }
return p.NotFound
}
var UnitServiceDeleteUnitResult_AccessEx_DEFAULT *AccessException
func (p *UnitServiceDeleteUnitResult) GetAccessEx() *AccessException {
  if !p.IsSetAccessEx() {
    return UnitServiceDeleteUnitResult_AccessEx_DEFAULT
  }
return p.AccessEx
}
func (p *UnitServiceDeleteUnitResult) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *UnitServiceDeleteUnitResult) IsSetAccessEx() bool {
  return p.AccessEx != nil
}

func (p *UnitServiceDeleteUnitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceDeleteUnitResult)  ReadField1(iprot thrift.TProtocol) error {
  p.NotFound = &NotFoundException{}
  if err := p.NotFound.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFound), err)
  }
  return nil
}

func (p *UnitServiceDeleteUnitResult)  ReadField2(iprot thrift.TProtocol) error {
  p.AccessEx = &AccessException{}
  if err := p.AccessEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AccessEx), err)
  }
  return nil
}

func (p *UnitServiceDeleteUnitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUnit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceDeleteUnitResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("notFound", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notFound: ", p), err) }
    if err := p.NotFound.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFound), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notFound: ", p), err) }
  }
  return err
}

func (p *UnitServiceDeleteUnitResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAccessEx() {
    if err := oprot.WriteFieldBegin("accessEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accessEx: ", p), err) }
    if err := p.AccessEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AccessEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accessEx: ", p), err) }
  }
  return err
}

func (p *UnitServiceDeleteUnitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceDeleteUnitResult(%+v)", *p)
}

// Attributes:
//  - UnitId
type UnitServiceGetAllMemberOfUnitArgs struct {
  UnitId string `thrift:"unitId,1" db:"unitId" json:"unitId"`
}

func NewUnitServiceGetAllMemberOfUnitArgs() *UnitServiceGetAllMemberOfUnitArgs {
  return &UnitServiceGetAllMemberOfUnitArgs{}
}


func (p *UnitServiceGetAllMemberOfUnitArgs) GetUnitId() string {
  return p.UnitId
}
func (p *UnitServiceGetAllMemberOfUnitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceGetAllMemberOfUnitArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UnitId = v
}
  return nil
}

func (p *UnitServiceGetAllMemberOfUnitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllMemberOfUnit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceGetAllMemberOfUnitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unitId: ", p), err) }
  if err := oprot.WriteString(string(p.UnitId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unitId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unitId: ", p), err) }
  return err
}

func (p *UnitServiceGetAllMemberOfUnitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceGetAllMemberOfUnitArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type UnitServiceGetAllMemberOfUnitResult struct {
  Success []*User `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *NotFoundException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUnitServiceGetAllMemberOfUnitResult() *UnitServiceGetAllMemberOfUnitResult {
  return &UnitServiceGetAllMemberOfUnitResult{}
}

var UnitServiceGetAllMemberOfUnitResult_Success_DEFAULT []*User

func (p *UnitServiceGetAllMemberOfUnitResult) GetSuccess() []*User {
  return p.Success
}
var UnitServiceGetAllMemberOfUnitResult_Err_DEFAULT *NotFoundException
func (p *UnitServiceGetAllMemberOfUnitResult) GetErr() *NotFoundException {
  if !p.IsSetErr() {
    return UnitServiceGetAllMemberOfUnitResult_Err_DEFAULT
  }
return p.Err
}
func (p *UnitServiceGetAllMemberOfUnitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UnitServiceGetAllMemberOfUnitResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UnitServiceGetAllMemberOfUnitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceGetAllMemberOfUnitResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*User, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem47 := &User{}
    if err := _elem47.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem47), err)
    }
    p.Success = append(p.Success, _elem47)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UnitServiceGetAllMemberOfUnitResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &NotFoundException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UnitServiceGetAllMemberOfUnitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllMemberOfUnit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceGetAllMemberOfUnitResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UnitServiceGetAllMemberOfUnitResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UnitServiceGetAllMemberOfUnitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceGetAllMemberOfUnitResult(%+v)", *p)
}

// Attributes:
//  - UnitId
//  - NumOfPage
//  - SizeOfPage
type UnitServiceGetMembersByPageArgs struct {
  UnitId string `thrift:"unitId,1" db:"unitId" json:"unitId"`
  NumOfPage int32 `thrift:"numOfPage,2" db:"numOfPage" json:"numOfPage"`
  SizeOfPage int32 `thrift:"sizeOfPage,3" db:"sizeOfPage" json:"sizeOfPage"`
}

func NewUnitServiceGetMembersByPageArgs() *UnitServiceGetMembersByPageArgs {
  return &UnitServiceGetMembersByPageArgs{}
}


func (p *UnitServiceGetMembersByPageArgs) GetUnitId() string {
  return p.UnitId
}

func (p *UnitServiceGetMembersByPageArgs) GetNumOfPage() int32 {
  return p.NumOfPage
}

func (p *UnitServiceGetMembersByPageArgs) GetSizeOfPage() int32 {
  return p.SizeOfPage
}
func (p *UnitServiceGetMembersByPageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceGetMembersByPageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UnitId = v
}
  return nil
}

func (p *UnitServiceGetMembersByPageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumOfPage = v
}
  return nil
}

func (p *UnitServiceGetMembersByPageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SizeOfPage = v
}
  return nil
}

func (p *UnitServiceGetMembersByPageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMembersByPage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceGetMembersByPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unitId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unitId: ", p), err) }
  if err := oprot.WriteString(string(p.UnitId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unitId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unitId: ", p), err) }
  return err
}

func (p *UnitServiceGetMembersByPageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numOfPage", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numOfPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumOfPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numOfPage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numOfPage: ", p), err) }
  return err
}

func (p *UnitServiceGetMembersByPageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sizeOfPage", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sizeOfPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.SizeOfPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sizeOfPage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sizeOfPage: ", p), err) }
  return err
}

func (p *UnitServiceGetMembersByPageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceGetMembersByPageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type UnitServiceGetMembersByPageResult struct {
  Success []*User `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *NotFoundException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewUnitServiceGetMembersByPageResult() *UnitServiceGetMembersByPageResult {
  return &UnitServiceGetMembersByPageResult{}
}

var UnitServiceGetMembersByPageResult_Success_DEFAULT []*User

func (p *UnitServiceGetMembersByPageResult) GetSuccess() []*User {
  return p.Success
}
var UnitServiceGetMembersByPageResult_Err_DEFAULT *NotFoundException
func (p *UnitServiceGetMembersByPageResult) GetErr() *NotFoundException {
  if !p.IsSetErr() {
    return UnitServiceGetMembersByPageResult_Err_DEFAULT
  }
return p.Err
}
func (p *UnitServiceGetMembersByPageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UnitServiceGetMembersByPageResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *UnitServiceGetMembersByPageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnitServiceGetMembersByPageResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*User, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem48 := &User{}
    if err := _elem48.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
    }
    p.Success = append(p.Success, _elem48)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UnitServiceGetMembersByPageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &NotFoundException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *UnitServiceGetMembersByPageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMembersByPage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnitServiceGetMembersByPageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UnitServiceGetMembersByPageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *UnitServiceGetMembersByPageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnitServiceGetMembersByPageResult(%+v)", *p)
}


