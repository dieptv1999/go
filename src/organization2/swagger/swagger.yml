swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /unit/:
    post:
      tags:
      - unit
      description: create Units
      operationId: UnitController.CreateUnit
      parameters:
      - in: body
        name: body
        description: body for Unit content
        required: true
        schema:
          $ref: '#/definitions/qlnv.Unit'
      responses:
        "200":
          description: '{int} qlnv.Unit.UnitId'
        "403":
          description: body is empty
  /unit/{uid}:
    get:
      tags:
      - unit
      description: get Unit by uid
      operationId: UnitController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/qlnv.Unit'
        "403":
          description: :uid is empty
    put:
      tags:
      - unit
      description: update the Unit
      operationId: UnitController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Unit content
        required: true
        schema:
          $ref: '#/definitions/qlnv.Unit'
      responses:
        "200":
          description: '{string}'
        "403":
          description: :uid is not int
    delete:
      tags:
      - unit
      description: delete the Unit
      operationId: UnitController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete'
        "403":
          description: uid is empty
  /unit/all-member/{uid}:
    get:
      tags:
      - unit
      description: get all members of the Unit
      operationId: UnitController.getAllMember
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/list-user'
        "403":
          description: uid is empty
  /unit/member-by-page:
    get:
      tags:
      - unit
      description: get members page of Unit
      operationId: UnitController.get member  by page
      parameters:
      - in: query
        name: unitId
        description: parameter require
        required: true
        type: string
      - in: query
        name: page
        description: parameter require
        required: true
        type: string
      - in: query
        name: size
        description: parameter require
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/members'
        "403":
          description: unitId page size is empty
  /unit/unit-by-page:
    get:
      tags:
      - unit
      description: get unit page
      operationId: UnitController.get unit  by page
      parameters:
      - in: query
        name: page
        description: parameter require
        required: true
        type: string
      - in: query
        name: size
        description: parameter require
        required: true
        type: string
      - in: query
        name: type
        description: parameter require
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/members'
        "403":
          description: page size type is empty
  /user/:
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/qlnv.User'
      responses:
        "200":
          description: '{int} qlnv.User.UserId'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/qlnv.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/qlnv.User'
      responses:
        "200":
          description: '{string}'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete'
        "403":
          description: uid is empty
  /user/by-page:
    get:
      tags:
      - user
      description: get page of Users (age)
      operationId: UserController.get by page
      parameters:
      - in: query
        name: page
        description: parameter require
        required: true
        type: string
      - in: query
        name: size
        description: parameter require
        required: true
        type: string
      - in: query
        name: type
        description: parameter require
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/test'
        "403":
          description: uid is empty
  /user/unit/{uid}:
    get:
      tags:
      - user
      description: get unit of the User
      operationId: UserController.UnitOfUser
      parameters:
      - in: path
        name: uid
        description: The uid you want to get Unit
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/qlnv.Unit'
        "403":
          description: uid is empty
definitions:
  list-user:
    title: list-user
    type: object
  members:
    title: members
    type: object
  qlnv.Unit:
    title: Unit
    type: object
  qlnv.User:
    title: User
    type: object
  test:
    title: test
    type: object
tags:
- name: unit
  description: |
    Operations about Units
- name: user
  description: |
    Operations about Users
